// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2023 10:05:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CH0;
reg CH1;
reg CH2;
reg CH3;
reg CH4;
reg CH5;
reg CH6;
reg CH7;
// wires                                               
wire dig1;
wire dig2;
wire dig3;
wire dig4;
wire [4:0] matriz_C;
wire [6:0] matriz_L;
wire ponto;
wire segA;
wire segB;
wire segC;
wire segD;
wire segE;
wire segF;
wire segG;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.CH0(CH0),
	.CH1(CH1),
	.CH2(CH2),
	.CH3(CH3),
	.CH4(CH4),
	.CH5(CH5),
	.CH6(CH6),
	.CH7(CH7),
	.dig1(dig1),
	.dig2(dig2),
	.dig3(dig3),
	.dig4(dig4),
	.matriz_C(matriz_C),
	.matriz_L(matriz_L),
	.ponto(ponto),
	.segA(segA),
	.segB(segB),
	.segC(segC),
	.segD(segD),
	.segE(segE),
	.segF(segF),
	.segG(segG)
);
initial 
begin 
#2560000 $finish;
end 

// CH0
always
begin
	CH0 = 1'b0;
	CH0 = #10000 1'b1;
	#10000;
end 

// CH1
always
begin
	CH1 = 1'b0;
	CH1 = #20000 1'b1;
	#20000;
end 

// CH2
always
begin
	CH2 = 1'b0;
	CH2 = #40000 1'b1;
	#40000;
end 

// CH3
always
begin
	CH3 = 1'b0;
	CH3 = #80000 1'b1;
	#80000;
end 

// CH4
always
begin
	CH4 = 1'b0;
	CH4 = #160000 1'b1;
	#160000;
end 

// CH5
always
begin
	CH5 = 1'b0;
	CH5 = #320000 1'b1;
	#320000;
end 

// CH6
always
begin
	CH6 = 1'b0;
	CH6 = #640000 1'b1;
	#640000;
end 

// CH7
always
begin
	CH7 = 1'b0;
	CH7 = #1280000 1'b1;
	#1280000;
end 
endmodule

